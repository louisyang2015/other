<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Overall Control</title>
<link rel="stylesheet" type="text/css" href="fpga.css" />
</head>

<body>

<h1>Overall Control</h1>
<p class="center">Last updated April 4, 2010</p>
<p class="center">
<img src="images/control_overall.gif" width="1024" height="1537" /></p>
<h2>Layered Control System</h2>
<p>During an array processor operation, the ALU does the same operation on a 
vector of values. Some control signals are constant and others are variable 
during this operations. Constant control signals come from AP_Control directly. 
The variable signals are mainly addresses, or they are address related. These 
variable signals come from address generators. Prior to executing an array 
operation, the AP_Control block needs to set up the address generators.</p>
<h2>Run Signals</h2>
<p>The datapath is pipelined so that different signals have to arrive at 
different times. For example, during the FFT operation, the memory read address 
happens nine clock cycles ahead of the corresponding memory write address. To 
implement this, the read and write address generators both have their own run 
signals. Then during the FFT operation, the write address generator run signal 
will go high nine cycles after the read address generator run signal. The 
various run signals are red in the block diagram.</p>
<h2>SSRAM Access</h2>
<p>The array processor control block (AP_Control) configures the SSRAM address 
generator (SSRAM_AG). The address generator provides the address, as well as the 
&quot;ssram_sel&quot; pin, which selects from either Y1.real or Y1.imag.</p>
<p>The AP_Control block sets the SSRAM control pins.</p>
<table>
			<tr>
						<td>&nbsp;</td>
						<td>ssram_read</td>
						<td>ssram_write</td>
						<td>&nbsp;</td>
			</tr>
			<tr>
						<td>Reading Mode</td>
						<td>1</td>
						<td>0</td>
						<td class="left">SSRAM is driving the databus</td>
			</tr>
			<tr>
						<td>Writing Mode</td>
						<td>0</td>
						<td>1</td>
						<td class="left">FPGA SSRAM interface module is driving 
						the databus</td>
			</tr>
			<tr>
						<td>SSRAM Disabled Mode</td>
						<td>0</td>
						<td>0</td>
						<td class="left">Neither FPGA SSRAM module nor SSRAM is 
						driving databus</td>
			</tr>
</table>
<p>When going from the reading mode to writing mode, or vice versa, go to the 
&quot;disabled mode&quot; as an intermediate mode. The idea is that under reading mode, 
the SSRAM chip is driving the data bus. If the interface goes to writing mode 
immediately, there would be a period of time when both the SSRAM chip and the 
FPGA is driving the data bus. Going to the disabled mode gives time for the 
SSRAM to disengage from driving the data bus. This is to comply with SSRAM device timing.</p>
<h2>Memory Write</h2>
<p>The block diagram above only shows control of memory A0r. The control of 
other memories are highly similar, including memories A0i, A1r, A1i, B0r, B0i, 
B1r, and B1i.</p>
<p><strong>wraddress0</strong> - This is generated by write address generator #0 
(Write_AG0). It&#39;s the write address for the memories A0i, A0r, B0i, and B0r.</p>
<p><strong>wraddress1</strong> - This signal is not shown in the block is 
generated by write address generator #1 (Write_AG1). It&#39;s the write address for 
the memories A1i, A1r, B1i, and B1r.</p>
<p><strong>A0_sel[0] </strong>- These signals select the data that feeds the A0 
memory&#39;s writedata lines. For many operations, this signal will be constant, so 
it will take on the value provided by AP_Control, which is the &quot;A0_sel0_ctrl&quot; in 
the block diagram. In FFT mode, this signal have to change depending on the FFT 
stage, so it will be under the address generator&#39;s control.</p>
<p><strong>B0_sel[0], A1_sel[0], and B1_sel[0]</strong> - Similar to A0_sel[0] 
in that these signals during FFT operation these signals will be under the 
control of the address generator, but they will follow the value set by 
AP_Control at other times.</p>
<p><strong>A0r_wren and the Wren_toggle block</strong> - The write enable (wren) 
signals are constant for most, but needs to toggle for SSRAM read operations. 
The SSRAM is 32 bit and each SSRAM read produces either the real or imaginary 
component of a complex number. So half of the time the SSRAM read feeds the A0r 
memory, and the other half of the time the read feeds the A0i memory.</p>
<h2>Memory Read</h2>
<p><strong>rdaddress</strong> - A single read address is applied to all memory 
blocks. In the block diagram only A0r is shown, but the read address also 
applies to A0i, A1r, A1i, B0r, B0i, B1r, and B0i.</p>
<p><strong>x0_sel[0] and x1_sel[0]</strong> - These signals are constant for 
most array operations, but they vary during the FFT operations. When x0_sel[0] 
and x1_sel[0] are constant, they will take on values provided by AP_Control. 
When running FFT, these signals are under address generator control.</p>
<h2>Twiddle Factor Memory</h2>
<p>The FFT twiddle factors are stored in read only memory.</p>
<p>T_AG - This is the twiddle factor address generator.</p>
<p>&nbsp;</p>
<h2>NIOS 2 - Array Processor Interface</h2>
<p class="center">
<img src="images/control_nios2.gif" width="1024" height="415" /></p>
<p>The interface between the NIOS 2 processor and the array processor unit (APU) is a FIFO. The 
is allows the array processor to run in a separate clock domain from NIOS 2. The 
NIOS 2 passes instructions and data to the array processor in a FIFO called &quot;Instr_FIFO&quot;. 
The array processor passes data back to the NIOS 2 in a FIFO called &quot;Result_FIFO&quot;. 
The array processor also passes a &quot;running&quot; flag to the NIOS 2 side to indicate 
its state.</p>
<p><strong>Instr_Filter</strong> - Some of the instructions for NIOS 2 are 
queries about the status of the array processor FIFOs or about whether the array 
processor is current running. These instructions are not passed onto the array 
processor, but they are handled locally by the Instr_Filter block.</p>

</body>

</html>
