<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Using GCC to do Assembly language programming under Linux</title>
</head>

<body>

<h1><font color="#008000">Using GCC to do Assembly language programming under 
Linux</font></h1>
<p><font size="4">The gcc itself is a compiler, but it also controls gas (GNU 
assembler) and ld (GNU linker) --- giving the impression that gcc itself can go 
all the way from source files to executables. All you need to do to generate an 
executable binary from C source code is:</font></p>
<p><b><font size="4" face="Courier New" color="#FF6600">gcc eatc.c -o eatc</font></b></p>
<p><font size="4">The entire process:</font></p>
<p><img border="0" src="images/pic008.gif" width="276" height="376"></p>
<p><font size="4">Since gcc is controlling gas and ld, you don't see gas and ld 
invoked. The yellow bubbles are the file extensions for the temporary files 
created during the process.</font></p>
<p>&nbsp;</p>
<p><font size="5" color="#008000">A problem with gas, and a work-around</font></p>
<p><font size="4">The gas program uses a syntax called &quot;AT&amp;T&quot; syntax that is 
ugly and hard to read</font></p>
<p><font size="4">The work around is then to use NASM to assemble the file, then 
use gcc to link the file:</font></p>
<p><font size="4" color="#FF6600" face="Courier New">nasm -f elf eatlinux.asm</font></p>
<p><font size="4">The &quot;-f elf&quot; tells NASM to generate object code in the ELF 
format (Executable and Linking Format).</font></p>
<p><font size="4" color="#FF6600" face="Courier New">gcc eatlinux.o -o eatlinux</font></p>
<p><font size="4">If you don't use the -o specifier, gcc will name the output &quot;a.out&quot;</font></p>

<p>&nbsp;</p>

<p><font size="4"><b><font color="#008000">Seeing the assembly code generated by 
the gcc:</font></b> normally, the assembly code generated by the gcc is not 
written to disk --- it's an intermediate file. You can save the assembly code to 
disk using <b><font color="#FF6600">-s</font></b>:</font></p>

<p><font size="4" face="Courier New" color="#FF6600">gcc dateis.c -S</font></p>

<p>&nbsp;</p>

<p><b><font size="4" color="#008000">Startup and Shutdown code</font></b></p>

<p><font size="4">If you write assembly program in Linux, the built process will 
attach startup code before the assembly code that you write, shutdown code after 
the code you write. In the assembly code that you write, you will call the C 
library, and the C library will call the kernel as needed. You can also call the 
kernel directly via INT 80h.</font></p>

</body>

</html>